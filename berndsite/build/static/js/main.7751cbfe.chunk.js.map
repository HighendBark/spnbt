{"version":3,"sources":["views/components/AppNavBar.tsx","views/Home.tsx","views/Chat.tsx","views/Portal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppNavBar","props","react","className","concat","colors","primary","style","maxWidth","textOnColor","title","flex","children","AppNavBarLink","transitionStyle","transition","react_router_dom","exact","undefined","activeClassName","Object","objectSpread","to","Home","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","React","Chat","Portal","secondary","tertiary","textDefault","textHighlight","setState","_this2","AppNavBar_AppNavBar","AppNavBar_AppNavBarLink","react_router","location","RouteProps","path","render","Home_Home","Chat_Chat","App","initialLoadingMessage","isLoading","loadingMessage","num","length","interval","setInterval","console","log","padEnd","clearInterval","react_default","a","createElement","Portal_Portal","Component","Boolean","window","hostname","match","history","createBrowserHistory","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7751cbfe.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { GeneralComponent } from \"../../models/GeneralComponent\";\r\nimport { AppColors } from \"../../models/AppColors\";\r\n\r\nexport const AppNavBar: React.FC<{\r\n  colors: AppColors;\r\n  title: string;\r\n  maxWidth: string;\r\n}> = props => {\r\n  return (\r\n    <div\r\n      className={`flex flex-grow-0 w-full h-10 px-2 justify-center items-center bg-${\r\n        props.colors.primary\r\n      }-500 shadow z-10`}\r\n    >\r\n      <div\r\n        className=\"flex justify-center items-center h-full w-full\"\r\n        style={{ maxWidth: props.maxWidth }}\r\n      >\r\n        <div\r\n          className={`flex flex-1 h-full w-full items-center items-center justify-center text-${\r\n            props.colors.textOnColor\r\n          } font-light text-md bg-${props.colors.primary}-900`}\r\n        >\r\n          {props.title}\r\n        </div>\r\n        <div className=\"w-4 h-full\" />\r\n        <div\r\n          className={`flex flex-1 h-full w-full items-center content-start`}\r\n          style={{\r\n            flex: 8\r\n          }}\r\n        >\r\n          {props.children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface AppNavBarLinkProps extends GeneralComponent {\r\n  to: string;\r\n  colors: AppColors;\r\n  exact?: boolean;\r\n}\r\n\r\nexport const AppNavBarLink: React.FC<AppNavBarLinkProps> = props => {\r\n  const transitionStyle: React.CSSProperties = { transition: \"all 200ms\" };\r\n  return (\r\n    <div\r\n      className={`flex h-full justify-center items-center text-${props.colors.primary}-300 ${\r\n        props.className\r\n      }`}\r\n      style={transitionStyle}\r\n    >\r\n      <NavLink\r\n        exact={props.exact !== undefined ? props.exact : false}\r\n        activeClassName={`bg-${props.colors.primary}-700 text-${props.colors.textOnColor}`}\r\n        className={`flex justify-center items-center h-full w-full text-sm hover:text-${\r\n          props.colors.textOnColor\r\n        } px-6 hover:underline`}\r\n        style={{ ...transitionStyle, ...props.style }}\r\n        to={props.to}\r\n      >\r\n        {props.children}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\n\r\nexport interface HomeProps {}\r\n\r\nexport interface HomeState {}\r\n\r\nexport class Home extends React.Component<HomeProps, HomeState> {\r\n  constructor(props: HomeProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return <div>Home</div>;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface ChatProps {}\r\n\r\nexport interface ChatState {}\r\n\r\nexport class Chat extends React.Component<ChatProps, ChatState> {\r\n  constructor(props: ChatProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return <div>Chat</div>;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps, Switch, Route } from \"react-router\";\r\nimport { AppNavBar, AppNavBarLink } from \"./components/AppNavBar\";\r\nimport { Home } from \"./Home\";\r\nimport { AppColors } from \"../models/AppColors\";\r\nimport { Chat } from \"./Chat\";\r\n\r\nexport interface PortalProps {\r\n  RouteProps: RouteComponentProps;\r\n}\r\n\r\nexport interface PortalState {\r\n  colors: AppColors;\r\n  maxWidth: string;\r\n}\r\n\r\nexport class Portal extends React.Component<PortalProps, PortalState> {\r\n  constructor(props: PortalProps) {\r\n    super(props);\r\n    this.state = {\r\n      colors: {\r\n        primary: \"orange\",\r\n        secondary: \"yellow\",\r\n        tertiary: \"teal\",\r\n        textOnColor: \"white\",\r\n        textDefault: \"black\",\r\n        textHighlight: \"purple\"\r\n      },\r\n      maxWidth: \"1400px\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`flex flex-col flex-1 w-full h-full`}>\r\n        <AppNavBar\r\n          maxWidth={this.state.maxWidth}\r\n          title={\"Bernds Page\"}\r\n          key={\"AppNavBar\"}\r\n          colors={this.state.colors}\r\n        >\r\n          <AppNavBarLink exact colors={this.state.colors} to=\"/\">\r\n            Home\r\n          </AppNavBarLink>\r\n          <AppNavBarLink colors={this.state.colors} to=\"/Chat/\">\r\n            Chat\r\n          </AppNavBarLink>\r\n        </AppNavBar>\r\n        <div className={`flex flex-1 w-full h-full justify-center items-center bg-gray-100`}>\r\n          <div\r\n            className=\"flex justify-center items-center w-full h-full\"\r\n            style={{ maxWidth: this.state.maxWidth }}\r\n          >\r\n            <Switch location={this.props.RouteProps.location}>\r\n              <Route exact path=\"/\" render={props => <Home {...this.state} />} />\r\n              <Route path=\"/Chat/\" render={props => <Chat {...this.state} />} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./output.css\";\nimport { Route } from \"react-router\";\nimport { Portal } from \"./views/Portal\";\n\nexport interface AppProps {}\n\nexport interface AppState {\n  isLoading: boolean;\n  loadingMessage: string;\n  num: number;\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  initialLoadingMessage: string;\n  constructor(props: AppProps) {\n    super(props);\n    this.initialLoadingMessage = \"Loading\";\n    this.state = {\n      isLoading: true,\n      loadingMessage: this.initialLoadingMessage,\n      num: this.initialLoadingMessage.length\n    };\n  }\n\n  componentDidMount() {\n    let interval = setInterval(() => {\n      console.log(\"test\");\n\n      this.setState({\n        loadingMessage: \"Loading\".padEnd(this.state.num, \".\"),\n        num:\n          this.state.num === this.initialLoadingMessage.length + 3\n            ? this.initialLoadingMessage.length\n            : this.state.num + 1\n      });\n    }, 450);\n    this.setState(\n      {\n        isLoading: false\n      },\n      () => {\n        clearInterval(interval);\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"flex flex-1 flex-col w-full h-full\">\n        {this.state.isLoading ? (\n          <div className=\"flex w-full h-full justify-center items-center bg-blue-100 text-3xl\">\n            {this.state.loadingMessage}\n          </div>\n        ) : (\n          <Route render={props => <Portal RouteProps={props} />} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createBrowserHistory } from \"history\";\nimport { Router } from \"react-router\";\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}